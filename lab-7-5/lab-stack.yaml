AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create a DynamoDB table with data

Resources:
  LabNotesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: "lab_notes"
      AttributeDefinitions:
        - AttributeName: "user_id"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "user_id"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  LabLoadDataRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join
        - "-"
        - - "nfc-load-data-role"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref AWS::StackId
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LabLoadDataPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource:
                  - "arn:aws:s3:::nfclabs-share/lab-data/lab-7-5/dynamodb-notes-sample-data.json"
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt LabNotesTable.Arn
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  LabLoadDataFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Join
        - "-"
        - - "lab_load_data"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref AWS::StackId
      Runtime: "python3.9"
      Handler: "index.handler"
      Role: !GetAtt LabLoadDataRole.Arn
      Timeout: 300
      Environment:
        Variables:
          SOURCE_BUCKET: "nfclabs-share"
          SOURCE_KEY: "lab-data/lab-7-5/dynamodb-notes-sample-data.json"
          DYNAMODB_TABLE: !Ref LabNotesTable
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          import json
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info('Event: %s', event)
              status = cfnresponse.SUCCESS
              try:
                  s3 = boto3.client('s3')
                  dynamodb = boto3.resource('dynamodb')
                  table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])
                  
                  source_bucket = os.environ['SOURCE_BUCKET']
                  source_key = os.environ['SOURCE_KEY']
                  
                  if event['RequestType'] in ['Create', 'Update']:
                      logger.info(f'Reading JSON data from S3: {source_bucket}/{source_key}')
                      response = s3.get_object(Bucket=source_bucket, Key=source_key)
                      json_data = response['Body'].read().decode('utf-8')
                      data = json.loads(json_data)
                      
                      for item in data:
                          logger.info(f'Inserting item: {item}')
                          table.put_item(Item=item)
                      logger.info('Data loaded successfully into DynamoDB')
              except Exception as e:
                  logger.error('Exception: %s', e)
                  status = cfnresponse.FAILED
              finally:
                  logger.info('Sending CloudFormation response with status: %s', status)
                  cfnresponse.send(event, context, status, {})

  LabLoadDataCustomResource:
    Type: "Custom::LabLoadDataCustomResource"
    DependsOn: LabLoadDataFunction
    Properties:
      ServiceToken: !GetAtt [LabLoadDataFunction, Arn]

AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to deploy the initial lab environment

Resources:
  LabNotesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: "lab_notes"
      AttributeDefinitions:
        - AttributeName: "user_id"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "user_id"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  LabLoadDataRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join
        - "-"
        - - "nfc-load-data-role"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref AWS::StackId
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LabLoadDataPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt LabNotesTable.Arn
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  LabLoadDataFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Join
        - "-"
        - - "lab_load_data"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref AWS::StackId
      Runtime: "python3.9"
      Handler: "index.handler"
      Role: !GetAtt LabLoadDataRole.Arn
      Timeout: 300
      Environment:
        Variables:
          GITHUB_URL: "https://raw.githubusercontent.com/rizmaxed/sls-labs-code/main/lab-7-5/data/dynamodb-notes-sample-data.json"
          DYNAMODB_TABLE: !Ref LabNotesTable
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          import urllib.request
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info('Event: %s', event)
              try:
                  dynamodb = boto3.resource('dynamodb')
                  table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])

                  github_url = os.environ['GITHUB_URL']
                  logger.info(f"Downloading JSON data from GitHub: {github_url}")

                  with urllib.request.urlopen(github_url) as response:
                      json_data = response.read().decode('utf-8')

                  data = json.loads(json_data)
                  
                  for item in data:
                      logger.info(f"Inserting item: {item}")
                      table.put_item(Item=item)

                  logger.info("Data loaded successfully into DynamoDB.")

              except Exception as e:
                  logger.error(f"Exception occurred: {e}")
                  raise
